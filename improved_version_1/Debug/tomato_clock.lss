
tomato_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  00000650  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800164  00800164  00000748  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c6c  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003d5  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053c  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fb  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061d  00000000  00000000  0000226b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e5       	ldi	r30, 0x50	; 80
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 36       	cpi	r26, 0x64	; 100
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e6       	ldi	r26, 0x64	; 100
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	aa 36       	cpi	r26, 0x6A	; 106
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
  ea:	0c 94 26 03 	jmp	0x64c	; 0x64c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <buzz_sound>:

#include "buzzer.h"

/* Toggle buzzer every buzz_delay_us, for a duration of buzz_length_ms. */
void buzz_sound(uint16_t buzz_length_ms, uint16_t buzz_delay_us)
{
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	eb 01       	movw	r28, r22
	uint32_t buzz_length_us;
	uint16_t z;

	buzz_length_us = buzz_length_ms * (uint32_t)1000;
  fc:	9c 01       	movw	r18, r24
  fe:	a8 ee       	ldi	r26, 0xE8	; 232
 100:	b3 e0       	ldi	r27, 0x03	; 3
 102:	0e 94 17 03 	call	0x62e	; 0x62e <__umulhisi3>
 106:	ab 01       	movw	r20, r22
 108:	bc 01       	movw	r22, r24
	while (buzz_length_us > buzz_delay_us*2) {
 10a:	8e 01       	movw	r16, r28
 10c:	00 0f       	add	r16, r16
 10e:	11 1f       	adc	r17, r17
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
		buzz_length_us -= buzz_delay_us*2;

		/* toggle the buzzer at various speeds */
		PORTC &= ~(1<<PC0);
		//		_delay_us((double) buzz_delay_us);
		z= buzz_delay_us;
 114:	fc 2f       	mov	r31, r28
 116:	ed 2f       	mov	r30, r29
{
	uint32_t buzz_length_us;
	uint16_t z;

	buzz_length_us = buzz_length_ms * (uint32_t)1000;
	while (buzz_length_us > buzz_delay_us*2) {
 118:	0e c0       	rjmp	.+28     	; 0x136 <buzz_sound+0x44>
		buzz_length_us -= buzz_delay_us*2;
 11a:	40 1b       	sub	r20, r16
 11c:	51 0b       	sbc	r21, r17
 11e:	62 0b       	sbc	r22, r18
 120:	73 0b       	sbc	r23, r19

		/* toggle the buzzer at various speeds */
		PORTC &= ~(1<<PC0);
 122:	40 98       	cbi	0x08, 0	; 8
		//		_delay_us((double) buzz_delay_us);
		z= buzz_delay_us;
 124:	8f 2f       	mov	r24, r31
 126:	9e 2f       	mov	r25, r30
		while (--z){};
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <buzz_sound+0x36>

		PORTC |= (1<<PC0);
 12c:	40 9a       	sbi	0x08, 0	; 8
		//		_delay_us((double) buzz_delay_us);
		z= buzz_delay_us;
 12e:	8f 2f       	mov	r24, r31
 130:	9e 2f       	mov	r25, r30
		while (--z){};
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <buzz_sound+0x40>
{
	uint32_t buzz_length_us;
	uint16_t z;

	buzz_length_us = buzz_length_ms * (uint32_t)1000;
	while (buzz_length_us > buzz_delay_us*2) {
 136:	04 17       	cp	r16, r20
 138:	15 07       	cpc	r17, r21
 13a:	26 07       	cpc	r18, r22
 13c:	37 07       	cpc	r19, r23
 13e:	68 f3       	brcs	.-38     	; 0x11a <buzz_sound+0x28>
		PORTC |= (1<<PC0);
		//		_delay_us((double) buzz_delay_us);
		z= buzz_delay_us;
		while (--z){};
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

0000014a <play_tone_1>:

void play_tone_1(void){ // four notes going up sounds  
		buzz_sound(500,3000);
 14a:	68 eb       	ldi	r22, 0xB8	; 184
 14c:	7b e0       	ldi	r23, 0x0B	; 11
 14e:	84 ef       	ldi	r24, 0xF4	; 244
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 79 00 	call	0xf2	; 0xf2 <buzz_sound>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	80 e7       	ldi	r24, 0x70	; 112
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <play_tone_1+0x12>
 164:	00 c0       	rjmp	.+0      	; 0x166 <play_tone_1+0x1c>
 166:	00 00       	nop
		_delay_ms(50);
		buzz_sound(550,2500);
 168:	64 ec       	ldi	r22, 0xC4	; 196
 16a:	79 e0       	ldi	r23, 0x09	; 9
 16c:	86 e2       	ldi	r24, 0x26	; 38
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	0e 94 79 00 	call	0xf2	; 0xf2 <buzz_sound>
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	80 e7       	ldi	r24, 0x70	; 112
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <play_tone_1+0x30>
 182:	00 c0       	rjmp	.+0      	; 0x184 <play_tone_1+0x3a>
 184:	00 00       	nop
		_delay_ms(50);
		buzz_sound(600,2000);
 186:	60 ed       	ldi	r22, 0xD0	; 208
 188:	77 e0       	ldi	r23, 0x07	; 7
 18a:	88 e5       	ldi	r24, 0x58	; 88
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	0e 94 79 00 	call	0xf2	; 0xf2 <buzz_sound>
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	80 e7       	ldi	r24, 0x70	; 112
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <play_tone_1+0x4e>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <play_tone_1+0x58>
 1a2:	00 00       	nop
		_delay_ms(50);
		buzz_sound(650,1500);
 1a4:	6c ed       	ldi	r22, 0xDC	; 220
 1a6:	75 e0       	ldi	r23, 0x05	; 5
 1a8:	8a e8       	ldi	r24, 0x8A	; 138
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	0e 94 79 00 	call	0xf2	; 0xf2 <buzz_sound>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	80 e7       	ldi	r24, 0x70	; 112
 1b4:	92 e0       	ldi	r25, 0x02	; 2
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <play_tone_1+0x6c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <play_tone_1+0x76>
 1c0:	00 00       	nop
 1c2:	08 95       	ret

000001c4 <WriteDisplays>:
	{ 1,0,0,0,1,1,0 },  // = T
};

void WriteDisplays(uint8_t digit, uint8_t displaynum){
	uint8_t PD_pin; // initialize to PD2 (PD2 refers to 2)
	PORTD &= 0b00000000; //clear port D
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	1b b8       	out	0x0b, r1	; 11
	
	// display select
	if (displaynum == 0){
 1c8:	61 11       	cpse	r22, r1
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <WriteDisplays+0x12>
		PORTC &= ~(1<<PC2); //select Sec2 display
 1cc:	42 98       	cbi	0x08, 2	; 8
		PORTC |= (1<<PC3) | (1<<PC4) | (1<<PC5); //disable all other modules
 1ce:	98 b1       	in	r25, 0x08	; 8
 1d0:	98 63       	ori	r25, 0x38	; 56
 1d2:	98 b9       	out	0x08, r25	; 8
 1d4:	27 c0       	rjmp	.+78     	; 0x224 <WriteDisplays+0x60>
		}else if (displaynum == 1){
 1d6:	61 30       	cpi	r22, 0x01	; 1
 1d8:	29 f4       	brne	.+10     	; 0x1e4 <WriteDisplays+0x20>
		PORTC &= ~(1<<PC3); //select Sec1 display
 1da:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<PC2) | (1<<PC4) | (1<<PC5); //disable all other modules
 1dc:	98 b1       	in	r25, 0x08	; 8
 1de:	94 63       	ori	r25, 0x34	; 52
 1e0:	98 b9       	out	0x08, r25	; 8
 1e2:	20 c0       	rjmp	.+64     	; 0x224 <WriteDisplays+0x60>
		}else if (displaynum == 2){
 1e4:	62 30       	cpi	r22, 0x02	; 2
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <WriteDisplays+0x2e>
		PORTC &= ~(1<<PC4); //select Min2
 1e8:	44 98       	cbi	0x08, 4	; 8
		PORTC |= (1<<PC2) | (1<<PC3) | (1<<PC5); //disable all other modules
 1ea:	98 b1       	in	r25, 0x08	; 8
 1ec:	9c 62       	ori	r25, 0x2C	; 44
 1ee:	98 b9       	out	0x08, r25	; 8
 1f0:	19 c0       	rjmp	.+50     	; 0x224 <WriteDisplays+0x60>
		}else if (displaynum == 3){
 1f2:	63 30       	cpi	r22, 0x03	; 3
 1f4:	b9 f4       	brne	.+46     	; 0x224 <WriteDisplays+0x60>
		PORTC &= ~(1<<PC5); //select Min1
 1f6:	45 98       	cbi	0x08, 5	; 8
		PORTC |= (1<<PC2) | (1<<PC3) | (1<<PC4); //disable all other modules
 1f8:	98 b1       	in	r25, 0x08	; 8
 1fa:	9c 61       	ori	r25, 0x1C	; 28
 1fc:	98 b9       	out	0x08, r25	; 8
 1fe:	12 c0       	rjmp	.+36     	; 0x224 <WriteDisplays+0x60>
	}
	
	// assign display number
	for (int segCount = 0; segCount <7; ++segCount){
		PD_pin = segCount + 1;
		PORTD |= (seven_seg_digits[digit][segCount]<<PD_pin); //assign [digit][a-g] to PD1-PD7
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	91 91       	ld	r25, Z+
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	5f 4f       	sbci	r21, 0xFF	; 255
 208:	29 2f       	mov	r18, r25
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	04 2e       	mov	r0, r20
 20e:	02 c0       	rjmp	.+4      	; 0x214 <WriteDisplays+0x50>
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <WriteDisplays+0x4c>
 218:	28 2b       	or	r18, r24
 21a:	2b b9       	out	0x0b, r18	; 11
		PORTC &= ~(1<<PC5); //select Min1
		PORTC |= (1<<PC2) | (1<<PC3) | (1<<PC4); //disable all other modules
	}
	
	// assign display number
	for (int segCount = 0; segCount <7; ++segCount){
 21c:	47 30       	cpi	r20, 0x07	; 7
 21e:	51 05       	cpc	r21, r1
 220:	79 f7       	brne	.-34     	; 0x200 <WriteDisplays+0x3c>
 222:	08 95       	ret
 224:	97 e0       	ldi	r25, 0x07	; 7
 226:	89 9f       	mul	r24, r25
 228:	f0 01       	movw	r30, r0
 22a:	11 24       	eor	r1, r1
 22c:	e4 5e       	subi	r30, 0xE4	; 228
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
	{ 1,0,0,1,1,1,1 },  // = E
	{ 1,0,1,1,0,1,1 },  // = S
	{ 1,0,0,0,1,1,0 },  // = T
};

void WriteDisplays(uint8_t digit, uint8_t displaynum){
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	e5 cf       	rjmp	.-54     	; 0x200 <WriteDisplays+0x3c>

00000236 <WriteWords>:
	}
}

void WriteWords(uint8_t word, uint8_t displaynum){
	uint8_t PD_pin; // initialize to PD2 (PD2 refers to 2)
	PORTD &= 0b00000000; //clear port D
 236:	9b b1       	in	r25, 0x0b	; 11
 238:	1b b8       	out	0x0b, r1	; 11
	
	// display select
	if (displaynum == 0){
 23a:	61 11       	cpse	r22, r1
 23c:	05 c0       	rjmp	.+10     	; 0x248 <WriteWords+0x12>
		PORTC &= ~(1<<PC2); //select Sec2 display
 23e:	42 98       	cbi	0x08, 2	; 8
		PORTC |= (1<<PC3) | (1<<PC4) | (1<<PC5); //disable all other modules
 240:	98 b1       	in	r25, 0x08	; 8
 242:	98 63       	ori	r25, 0x38	; 56
 244:	98 b9       	out	0x08, r25	; 8
 246:	27 c0       	rjmp	.+78     	; 0x296 <WriteWords+0x60>
		}else if (displaynum == 1){
 248:	61 30       	cpi	r22, 0x01	; 1
 24a:	29 f4       	brne	.+10     	; 0x256 <WriteWords+0x20>
		PORTC &= ~(1<<PC3); //select Sec1 display
 24c:	43 98       	cbi	0x08, 3	; 8
		PORTC |= (1<<PC2) | (1<<PC4) | (1<<PC5); //disable all other modules
 24e:	98 b1       	in	r25, 0x08	; 8
 250:	94 63       	ori	r25, 0x34	; 52
 252:	98 b9       	out	0x08, r25	; 8
 254:	20 c0       	rjmp	.+64     	; 0x296 <WriteWords+0x60>
		}else if (displaynum == 2){
 256:	62 30       	cpi	r22, 0x02	; 2
 258:	29 f4       	brne	.+10     	; 0x264 <WriteWords+0x2e>
		PORTC &= ~(1<<PC4); //select Min2
 25a:	44 98       	cbi	0x08, 4	; 8
		PORTC |= (1<<PC2) | (1<<PC3) | (1<<PC5); //disable all other modules
 25c:	98 b1       	in	r25, 0x08	; 8
 25e:	9c 62       	ori	r25, 0x2C	; 44
 260:	98 b9       	out	0x08, r25	; 8
 262:	19 c0       	rjmp	.+50     	; 0x296 <WriteWords+0x60>
		}else if (displaynum == 3){
 264:	63 30       	cpi	r22, 0x03	; 3
 266:	b9 f4       	brne	.+46     	; 0x296 <WriteWords+0x60>
		PORTC &= ~(1<<PC5); //select Min1
 268:	45 98       	cbi	0x08, 5	; 8
		PORTC |= (1<<PC2) | (1<<PC3) | (1<<PC4); //disable all other modules
 26a:	98 b1       	in	r25, 0x08	; 8
 26c:	9c 61       	ori	r25, 0x1C	; 28
 26e:	98 b9       	out	0x08, r25	; 8
 270:	12 c0       	rjmp	.+36     	; 0x296 <WriteWords+0x60>
	}
	
	// assign display number
	for (int segCount = 0; segCount <7; ++segCount){
		PD_pin = segCount + 1;
		PORTD |= (seven_seg_word[word][segCount]<<PD_pin); //assign [word][a-g] to PD1-PD7
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	91 91       	ld	r25, Z+
 276:	4f 5f       	subi	r20, 0xFF	; 255
 278:	5f 4f       	sbci	r21, 0xFF	; 255
 27a:	29 2f       	mov	r18, r25
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	04 2e       	mov	r0, r20
 280:	02 c0       	rjmp	.+4      	; 0x286 <WriteWords+0x50>
 282:	22 0f       	add	r18, r18
 284:	33 1f       	adc	r19, r19
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <WriteWords+0x4c>
 28a:	28 2b       	or	r18, r24
 28c:	2b b9       	out	0x0b, r18	; 11
		PORTC &= ~(1<<PC5); //select Min1
		PORTC |= (1<<PC2) | (1<<PC3) | (1<<PC4); //disable all other modules
	}
	
	// assign display number
	for (int segCount = 0; segCount <7; ++segCount){
 28e:	47 30       	cpi	r20, 0x07	; 7
 290:	51 05       	cpc	r21, r1
 292:	79 f7       	brne	.-34     	; 0x272 <WriteWords+0x3c>
 294:	08 95       	ret
 296:	97 e0       	ldi	r25, 0x07	; 7
 298:	89 9f       	mul	r24, r25
 29a:	f0 01       	movw	r30, r0
 29c:	11 24       	eor	r1, r1
 29e:	e0 50       	subi	r30, 0x00	; 0
 2a0:	ff 4f       	sbci	r31, 0xFF	; 255
		PD_pin = segCount + 1;
		PORTD |= (seven_seg_digits[digit][segCount]<<PD_pin); //assign [digit][a-g] to PD1-PD7
	}
}

void WriteWords(uint8_t word, uint8_t displaynum){
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	e5 cf       	rjmp	.-54     	; 0x272 <WriteWords+0x3c>

000002a8 <Display_REST>:
	}
}


void Display_REST(void){
	WriteWords(3,0); //T at sec2
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	0e 94 1b 01 	call	0x236	; 0x236 <WriteWords>
 2b0:	8f e1       	ldi	r24, 0x1F	; 31
 2b2:	9e e4       	ldi	r25, 0x4E	; 78
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <Display_REST+0xc>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <Display_REST+0x12>
 2ba:	00 00       	nop
	_delay_ms(POV_delay);
	WriteWords(2,1); //S at sec1
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	0e 94 1b 01 	call	0x236	; 0x236 <WriteWords>
 2c4:	8f e1       	ldi	r24, 0x1F	; 31
 2c6:	9e e4       	ldi	r25, 0x4E	; 78
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <Display_REST+0x20>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <Display_REST+0x26>
 2ce:	00 00       	nop
	_delay_ms(POV_delay);
	WriteWords(1,2); //E at min2
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 1b 01 	call	0x236	; 0x236 <WriteWords>
 2d8:	8f e1       	ldi	r24, 0x1F	; 31
 2da:	9e e4       	ldi	r25, 0x4E	; 78
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <Display_REST+0x34>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <Display_REST+0x3a>
 2e2:	00 00       	nop
	_delay_ms(POV_delay);
	WriteWords(0,3); //R at min1
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 1b 01 	call	0x236	; 0x236 <WriteWords>
 2ec:	8f e1       	ldi	r24, 0x1F	; 31
 2ee:	9e e4       	ldi	r25, 0x4E	; 78
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <Display_REST+0x48>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <Display_REST+0x4e>
 2f6:	00 00       	nop
 2f8:	08 95       	ret

000002fa <DisplaySeconds>:
	_delay_ms(POV_delay);
}

// figure out what to display on sec2 and sec1
void DisplaySeconds(void){
 2fa:	cf 93       	push	r28
	if (seconds/10 == 0 && seconds < 10){
 2fc:	80 91 65 01 	lds	r24, 0x0165
 300:	8a 30       	cpi	r24, 0x0A	; 10
 302:	b0 f4       	brcc	.+44     	; 0x330 <DisplaySeconds+0x36>
		WriteDisplays(0,1);
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 30c:	8f e1       	ldi	r24, 0x1F	; 31
 30e:	9e e4       	ldi	r25, 0x4E	; 78
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <DisplaySeconds+0x16>
 314:	00 c0       	rjmp	.+0      	; 0x316 <DisplaySeconds+0x1c>
 316:	00 00       	nop
		_delay_ms(POV_delay);
		WriteDisplays(seconds,0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	80 91 65 01 	lds	r24, 0x0165
 31e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 322:	8f e1       	ldi	r24, 0x1F	; 31
 324:	9e e4       	ldi	r25, 0x4E	; 78
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <DisplaySeconds+0x2c>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <DisplaySeconds+0x32>
 32c:	00 00       	nop
 32e:	50 c0       	rjmp	.+160    	; 0x3d0 <DisplaySeconds+0xd6>
		_delay_ms(POV_delay);
		}else if (seconds%10 != 0){
 330:	9d ec       	ldi	r25, 0xCD	; 205
 332:	89 9f       	mul	r24, r25
 334:	91 2d       	mov	r25, r1
 336:	11 24       	eor	r1, r1
 338:	96 95       	lsr	r25
 33a:	96 95       	lsr	r25
 33c:	96 95       	lsr	r25
 33e:	99 0f       	add	r25, r25
 340:	29 2f       	mov	r18, r25
 342:	22 0f       	add	r18, r18
 344:	22 0f       	add	r18, r18
 346:	92 0f       	add	r25, r18
 348:	89 17       	cp	r24, r25
 34a:	41 f1       	breq	.+80     	; 0x39c <DisplaySeconds+0xa2>
		WriteDisplays(seconds/10,1);
 34c:	cd ec       	ldi	r28, 0xCD	; 205
 34e:	8c 9f       	mul	r24, r28
 350:	81 2d       	mov	r24, r1
 352:	11 24       	eor	r1, r1
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	86 95       	lsr	r24
 358:	86 95       	lsr	r24
 35a:	86 95       	lsr	r24
 35c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 360:	8f e1       	ldi	r24, 0x1F	; 31
 362:	9e e4       	ldi	r25, 0x4E	; 78
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <DisplaySeconds+0x6a>
 368:	00 c0       	rjmp	.+0      	; 0x36a <DisplaySeconds+0x70>
 36a:	00 00       	nop
		_delay_ms(POV_delay);
		WriteDisplays(seconds%10,0);
 36c:	80 91 65 01 	lds	r24, 0x0165
 370:	8c 9f       	mul	r24, r28
 372:	c1 2d       	mov	r28, r1
 374:	11 24       	eor	r1, r1
 376:	c6 95       	lsr	r28
 378:	c6 95       	lsr	r28
 37a:	c6 95       	lsr	r28
 37c:	cc 0f       	add	r28, r28
 37e:	9c 2f       	mov	r25, r28
 380:	99 0f       	add	r25, r25
 382:	99 0f       	add	r25, r25
 384:	c9 0f       	add	r28, r25
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	8c 1b       	sub	r24, r28
 38a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 38e:	8f e1       	ldi	r24, 0x1F	; 31
 390:	9e e4       	ldi	r25, 0x4E	; 78
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <DisplaySeconds+0x98>
 396:	00 c0       	rjmp	.+0      	; 0x398 <DisplaySeconds+0x9e>
 398:	00 00       	nop
 39a:	1a c0       	rjmp	.+52     	; 0x3d0 <DisplaySeconds+0xd6>
		_delay_ms(POV_delay);
		}else if (seconds%10 == 0){
		WriteDisplays(seconds/10,1);
 39c:	9d ec       	ldi	r25, 0xCD	; 205
 39e:	89 9f       	mul	r24, r25
 3a0:	81 2d       	mov	r24, r1
 3a2:	11 24       	eor	r1, r1
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	86 95       	lsr	r24
 3a8:	86 95       	lsr	r24
 3aa:	86 95       	lsr	r24
 3ac:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 3b0:	8f e1       	ldi	r24, 0x1F	; 31
 3b2:	9e e4       	ldi	r25, 0x4E	; 78
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <DisplaySeconds+0xba>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <DisplaySeconds+0xc0>
 3ba:	00 00       	nop
		_delay_ms(POV_delay);
		WriteDisplays(0,0);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 3c4:	8f e1       	ldi	r24, 0x1F	; 31
 3c6:	9e e4       	ldi	r25, 0x4E	; 78
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <DisplaySeconds+0xce>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <DisplaySeconds+0xd4>
 3ce:	00 00       	nop
		_delay_ms(POV_delay);
	}
}
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <DisplayMinutes>:

// figure out what to display on min2 and min1
void DisplayMinutes(void){
 3d4:	cf 93       	push	r28
	if (minutes/10 == 0 && minutes < 10){
 3d6:	80 91 63 01 	lds	r24, 0x0163
 3da:	8a 30       	cpi	r24, 0x0A	; 10
 3dc:	b0 f4       	brcc	.+44     	; 0x40a <DisplayMinutes+0x36>
		WriteDisplays(0,3);
 3de:	63 e0       	ldi	r22, 0x03	; 3
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 3e6:	8f e1       	ldi	r24, 0x1F	; 31
 3e8:	9e e4       	ldi	r25, 0x4E	; 78
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <DisplayMinutes+0x16>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <DisplayMinutes+0x1c>
 3f0:	00 00       	nop
		_delay_ms(POV_delay);
		WriteDisplays(minutes,2);
 3f2:	62 e0       	ldi	r22, 0x02	; 2
 3f4:	80 91 63 01 	lds	r24, 0x0163
 3f8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 3fc:	8f e1       	ldi	r24, 0x1F	; 31
 3fe:	9e e4       	ldi	r25, 0x4E	; 78
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <DisplayMinutes+0x2c>
 404:	00 c0       	rjmp	.+0      	; 0x406 <DisplayMinutes+0x32>
 406:	00 00       	nop
 408:	50 c0       	rjmp	.+160    	; 0x4aa <DisplayMinutes+0xd6>
		_delay_ms(POV_delay);
		}else if (minutes%10 != 0){
 40a:	9d ec       	ldi	r25, 0xCD	; 205
 40c:	89 9f       	mul	r24, r25
 40e:	91 2d       	mov	r25, r1
 410:	11 24       	eor	r1, r1
 412:	96 95       	lsr	r25
 414:	96 95       	lsr	r25
 416:	96 95       	lsr	r25
 418:	99 0f       	add	r25, r25
 41a:	29 2f       	mov	r18, r25
 41c:	22 0f       	add	r18, r18
 41e:	22 0f       	add	r18, r18
 420:	92 0f       	add	r25, r18
 422:	89 17       	cp	r24, r25
 424:	41 f1       	breq	.+80     	; 0x476 <DisplayMinutes+0xa2>
		WriteDisplays(minutes/10,3);
 426:	cd ec       	ldi	r28, 0xCD	; 205
 428:	8c 9f       	mul	r24, r28
 42a:	81 2d       	mov	r24, r1
 42c:	11 24       	eor	r1, r1
 42e:	63 e0       	ldi	r22, 0x03	; 3
 430:	86 95       	lsr	r24
 432:	86 95       	lsr	r24
 434:	86 95       	lsr	r24
 436:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 43a:	8f e1       	ldi	r24, 0x1F	; 31
 43c:	9e e4       	ldi	r25, 0x4E	; 78
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <DisplayMinutes+0x6a>
 442:	00 c0       	rjmp	.+0      	; 0x444 <DisplayMinutes+0x70>
 444:	00 00       	nop
		_delay_ms(POV_delay);
		WriteDisplays(minutes%10,2);
 446:	80 91 63 01 	lds	r24, 0x0163
 44a:	8c 9f       	mul	r24, r28
 44c:	c1 2d       	mov	r28, r1
 44e:	11 24       	eor	r1, r1
 450:	c6 95       	lsr	r28
 452:	c6 95       	lsr	r28
 454:	c6 95       	lsr	r28
 456:	cc 0f       	add	r28, r28
 458:	9c 2f       	mov	r25, r28
 45a:	99 0f       	add	r25, r25
 45c:	99 0f       	add	r25, r25
 45e:	c9 0f       	add	r28, r25
 460:	62 e0       	ldi	r22, 0x02	; 2
 462:	8c 1b       	sub	r24, r28
 464:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 468:	8f e1       	ldi	r24, 0x1F	; 31
 46a:	9e e4       	ldi	r25, 0x4E	; 78
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <DisplayMinutes+0x98>
 470:	00 c0       	rjmp	.+0      	; 0x472 <DisplayMinutes+0x9e>
 472:	00 00       	nop
 474:	1a c0       	rjmp	.+52     	; 0x4aa <DisplayMinutes+0xd6>
		_delay_ms(POV_delay);
		}else if (minutes%10 == 0){
		WriteDisplays(minutes/10,3);
 476:	9d ec       	ldi	r25, 0xCD	; 205
 478:	89 9f       	mul	r24, r25
 47a:	81 2d       	mov	r24, r1
 47c:	11 24       	eor	r1, r1
 47e:	63 e0       	ldi	r22, 0x03	; 3
 480:	86 95       	lsr	r24
 482:	86 95       	lsr	r24
 484:	86 95       	lsr	r24
 486:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 48a:	8f e1       	ldi	r24, 0x1F	; 31
 48c:	9e e4       	ldi	r25, 0x4E	; 78
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <DisplayMinutes+0xba>
 492:	00 c0       	rjmp	.+0      	; 0x494 <DisplayMinutes+0xc0>
 494:	00 00       	nop
		_delay_ms(POV_delay);
		WriteDisplays(0,2);
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <WriteDisplays>
 49e:	8f e1       	ldi	r24, 0x1F	; 31
 4a0:	9e e4       	ldi	r25, 0x4E	; 78
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <DisplayMinutes+0xce>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <DisplayMinutes+0xd4>
 4a8:	00 00       	nop
		_delay_ms(POV_delay);
	}
}
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <IO_init>:
volatile uint8_t seconds = 0;
bool need_reset = false;
bool song_flag = true;

void IO_init(void){
	DDRD = 0b11111110; //set PD1-PD7 as output
 4ae:	8e ef       	ldi	r24, 0xFE	; 254
 4b0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00111100; //set PB2-PB3 as output buzzer
 4b2:	8c e3       	ldi	r24, 0x3C	; 60
 4b4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00111101; //set PC1-PC5 as output, PC1 as input
 4b6:	8d e3       	ldi	r24, 0x3D	; 61
 4b8:	87 b9       	out	0x07, r24	; 7
	SET_BIT(PORTC, PC1); //use internal pull-up resistor
 4ba:	41 9a       	sbi	0x08, 1	; 8
 4bc:	08 95       	ret

000004be <main>:


int main(void)
{
    // initialization 
	IO_init();
 4be:	0e 94 57 02 	call	0x4ae	; 0x4ae <IO_init>
	TIMER0_init();
 4c2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TIMER0_init>
	TIMER1_init();
 4c6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TIMER1_init>
	
	sei(); //enable interrupt
 4ca:	78 94       	sei

    while (1) 
    {	
		if (!need_reset)
 4cc:	80 91 64 01 	lds	r24, 0x0164
 4d0:	81 11       	cpse	r24, r1
 4d2:	05 c0       	rjmp	.+10     	; 0x4de <main+0x20>
		{
			//display time
			DisplaySeconds();
 4d4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DisplaySeconds>
			DisplayMinutes();
 4d8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <DisplayMinutes>
 4dc:	f7 cf       	rjmp	.-18     	; 0x4cc <main+0xe>
			
		}else{		
			//display REST
			Display_REST();
 4de:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Display_REST>
			if (song_flag) // play the tone once
 4e2:	80 91 62 01 	lds	r24, 0x0162
 4e6:	88 23       	and	r24, r24
 4e8:	89 f3       	breq	.-30     	; 0x4cc <main+0xe>
			{
				play_tone_1(); 
 4ea:	0e 94 a5 00 	call	0x14a	; 0x14a <play_tone_1>
				song_flag = false; //disable buzzer sound
 4ee:	10 92 62 01 	sts	0x0162, r1
 4f2:	ec cf       	rjmp	.-40     	; 0x4cc <main+0xe>

000004f4 <TIMER0_init>:
extern bool need_reset;
extern uint8_t minutes;
extern uint8_t seconds; 

void TIMER0_init(void){
	TCCR0A = 0b00000010; //CTC mode, see TCCR0B too
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000010; //chip clock / 8
 4f8:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TIMSK0, OCIE0A); //enable interrupt
 4fa:	ee e6       	ldi	r30, 0x6E	; 110
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	82 60       	ori	r24, 0x02	; 2
 502:	80 83       	st	Z, r24
	OCR0A = 0xFE;  // set compare register 
 504:	8e ef       	ldi	r24, 0xFE	; 254
 506:	87 bd       	out	0x27, r24	; 39
 508:	08 95       	ret

0000050a <__vector_14>:
}

ISR(TIMER0_COMPA_vect){
 50a:	1f 92       	push	r1
 50c:	0f 92       	push	r0
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	0f 92       	push	r0
 512:	11 24       	eor	r1, r1
 514:	2f 93       	push	r18
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
	if (BIT_IS_CLEAR(PINC, PC1))
 51a:	31 99       	sbic	0x06, 1	; 6
 51c:	28 c0       	rjmp	.+80     	; 0x56e <__vector_14+0x64>
	{
		intConsecutivePresses++; // increment counter for number of presses
 51e:	80 91 68 01 	lds	r24, 0x0168
 522:	90 91 69 01 	lds	r25, 0x0169
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	90 93 69 01 	sts	0x0169, r25
 52c:	80 93 68 01 	sts	0x0168, r24
		if(intConsecutivePresses >= NUM_OF_CONSECUTIVE_PRESSES) {			// if enough presses to constitute a press		
 530:	80 91 68 01 	lds	r24, 0x0168
 534:	90 91 69 01 	lds	r25, 0x0169
 538:	80 32       	cpi	r24, 0x20	; 32
 53a:	93 40       	sbci	r25, 0x03	; 3
 53c:	8c f1       	brlt	.+98     	; 0x5a0 <__vector_14+0x96>
			if (minutes >= 30) //reset the time to the alternative
 53e:	80 91 63 01 	lds	r24, 0x0163
 542:	8e 31       	cpi	r24, 0x1E	; 30
 544:	30 f0       	brcs	.+12     	; 0x552 <__vector_14+0x48>
			{
				minutes = 25; 
 546:	89 e1       	ldi	r24, 0x19	; 25
 548:	80 93 63 01 	sts	0x0163, r24
				seconds = 0; 
 54c:	10 92 65 01 	sts	0x0165, r1
 550:	05 c0       	rjmp	.+10     	; 0x55c <__vector_14+0x52>
			}else{
				minutes = 45; 
 552:	8d e2       	ldi	r24, 0x2D	; 45
 554:	80 93 63 01 	sts	0x0163, r24
				seconds = 0;
 558:	10 92 65 01 	sts	0x0165, r1
			}										
			intConsecutivePresses = 0;										// and reset press counts
 55c:	10 92 69 01 	sts	0x0169, r1
 560:	10 92 68 01 	sts	0x0168, r1
			intConsecutiveNonPresses = 0;
 564:	10 92 67 01 	sts	0x0167, r1
 568:	10 92 66 01 	sts	0x0166, r1
 56c:	19 c0       	rjmp	.+50     	; 0x5a0 <__vector_14+0x96>
		}	
	}else if(BIT_IS_SET(PINC, PC1)) {						// else if button is not pressed (logic low)
 56e:	31 9b       	sbis	0x06, 1	; 6
 570:	17 c0       	rjmp	.+46     	; 0x5a0 <__vector_14+0x96>
		intConsecutiveNonPresses++;
 572:	80 91 66 01 	lds	r24, 0x0166
 576:	90 91 67 01 	lds	r25, 0x0167
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	90 93 67 01 	sts	0x0167, r25
 580:	80 93 66 01 	sts	0x0166, r24
		if(intConsecutiveNonPresses >= NUM_OF_CONSECUTIVE_NON_PRESSES) {
 584:	80 91 66 01 	lds	r24, 0x0166
 588:	90 91 67 01 	lds	r25, 0x0167
 58c:	04 97       	sbiw	r24, 0x04	; 4
 58e:	44 f0       	brlt	.+16     	; 0x5a0 <__vector_14+0x96>
			intConsecutivePresses = 0;										// reset press counts
 590:	10 92 69 01 	sts	0x0169, r1
 594:	10 92 68 01 	sts	0x0168, r1
			intConsecutiveNonPresses = 0;
 598:	10 92 67 01 	sts	0x0167, r1
 59c:	10 92 66 01 	sts	0x0166, r1
		}
	}
}
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <TIMER1_init>:

// Timer1 for 1s counting
void TIMER1_init(void){
	TCCR1A = 0b00000000; //normal mode
 5b0:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0b00001101; //CTC mode, clk_t0 = clk_io/1024
 5b4:	8d e0       	ldi	r24, 0x0D	; 13
 5b6:	80 93 81 00 	sts	0x0081, r24
	OCR1A = 0x3D08; // trigger interrupt every 1s
 5ba:	88 e0       	ldi	r24, 0x08	; 8
 5bc:	9d e3       	ldi	r25, 0x3D	; 61
 5be:	90 93 89 00 	sts	0x0089, r25
 5c2:	80 93 88 00 	sts	0x0088, r24
	// OCR1A = 0x0024; //for quick testing
	SET_BIT(TIMSK1, OCIE1A); // timer output compare match A interrupt enable
 5c6:	ef e6       	ldi	r30, 0x6F	; 111
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	82 60       	ori	r24, 0x02	; 2
 5ce:	80 83       	st	Z, r24
	SET_BIT(PORTB, PB1); //set OC1A as output, doesn't matter input or output
 5d0:	29 9a       	sbi	0x05, 1	; 5
 5d2:	08 95       	ret

000005d4 <__vector_11>:
}


// execute every 1s, down counting function is here
ISR(TIMER1_COMPA_vect){	//store value here only
 5d4:	1f 92       	push	r1
 5d6:	0f 92       	push	r0
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	0f 92       	push	r0
 5dc:	11 24       	eor	r1, r1
 5de:	8f 93       	push	r24
	if (!need_reset) // if no need reset, keep down-counting
 5e0:	80 91 64 01 	lds	r24, 0x0164
 5e4:	81 11       	cpse	r24, r1
 5e6:	1d c0       	rjmp	.+58     	; 0x622 <__vector_11+0x4e>
	{
		if(seconds < 1){ //when second reaches 0
 5e8:	80 91 65 01 	lds	r24, 0x0165
 5ec:	81 11       	cpse	r24, r1
 5ee:	08 c0       	rjmp	.+16     	; 0x600 <__vector_11+0x2c>
			seconds = 60;
 5f0:	8c e3       	ldi	r24, 0x3C	; 60
 5f2:	80 93 65 01 	sts	0x0165, r24
			minutes -= 1;
 5f6:	80 91 63 01 	lds	r24, 0x0163
 5fa:	81 50       	subi	r24, 0x01	; 1
 5fc:	80 93 63 01 	sts	0x0163, r24
		}
		if (minutes < 1)
 600:	80 91 63 01 	lds	r24, 0x0163
 604:	81 11       	cpse	r24, r1
 606:	08 c0       	rjmp	.+16     	; 0x618 <__vector_11+0x44>
		{
			minutes = 45;//reset
 608:	8d e2       	ldi	r24, 0x2D	; 45
 60a:	80 93 63 01 	sts	0x0163, r24
			seconds = 0;
 60e:	10 92 65 01 	sts	0x0165, r1
			need_reset = true; // need reset when time is up
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	80 93 64 01 	sts	0x0164, r24
		}
		seconds--;
 618:	80 91 65 01 	lds	r24, 0x0165
 61c:	81 50       	subi	r24, 0x01	; 1
 61e:	80 93 65 01 	sts	0x0165, r24
		}else{
		// no counting at all
	}
}
 622:	8f 91       	pop	r24
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <__umulhisi3>:
 62e:	a2 9f       	mul	r26, r18
 630:	b0 01       	movw	r22, r0
 632:	b3 9f       	mul	r27, r19
 634:	c0 01       	movw	r24, r0
 636:	a3 9f       	mul	r26, r19
 638:	70 0d       	add	r23, r0
 63a:	81 1d       	adc	r24, r1
 63c:	11 24       	eor	r1, r1
 63e:	91 1d       	adc	r25, r1
 640:	b2 9f       	mul	r27, r18
 642:	70 0d       	add	r23, r0
 644:	81 1d       	adc	r24, r1
 646:	11 24       	eor	r1, r1
 648:	91 1d       	adc	r25, r1
 64a:	08 95       	ret

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
